package parkinglot;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

import parkinglot.InitSettings.ParkingType;
import parkinglot.InitSettings.VehicleType;

public class ParkingLot {
	//private static HashMap<Integer, int[]> parkingSlotMap = new HashMap<Integer, int[]>(); 
	private ParkingLevel[] parkingLevels;
	private int overallParkingSpotCounter;
	private HashMap<String, Long> licensePlateMap;
	private PriorityQueue<Vehicle> incomingVehicles; 
	public ParkingLot() {
		// TODO Auto-generated constructor stub
		overallParkingSpotCounter = 0;
		parkingLevels = new ParkingLevel[InitSettings.TOTAL_NUMBER_OF_PARKING_LEVELS];
		setLicensePlateMap(new HashMap<>());
		incomingVehicles = new PriorityQueue<Vehicle>();
		createLevels();
	}
	
	public ParkingLevel[] getParkingLevels() {
		return parkingLevels;
	}

	public void setParkingLevels(ParkingLevel[] parkingLevels) {
		this.parkingLevels = parkingLevels;
	}
	
	public void createLevels(){
		for(int i = 0; i<InitSettings.NUMBER_OF_HEAVY_VEHICLE_BAYS; i++){
			parkingLevels[i] = new HeavyVehicleBay(i, overallParkingSpotCounter);
		}
		for(int i = 0; i<InitSettings.NUMBER_OF_PARKING_BAYS; i++){
			parkingLevels[i] = new ParkingBay(i, overallParkingSpotCounter);
		}
	}
	
	public void checkRow(ParkingType parkingType, int level, int row){
		Boolean rowStatus = Boolean.FALSE;
		switch(parkingType){
		case HANDICAPPED:
			for(int spot = 0; spot < parkingLevels[level].rowsInLevel.get(row).size();spot++){
				if(parkingLevels[level].rowsInLevel.get(row).get(spot) instanceof GeneralParkingSpot && ((GeneralParkingSpot) parkingLevels[level].rowsInLevel.get(row).get(spot)).isHandicapped() == true && parkingLevels[level].rowsInLevel.get(row).get(spot).isOccupied()==false){
					rowStatus = Boolean.TRUE;
				}
			}
			parkingLevels[level].getRowAvailability().get(row).set(0,rowStatus);
			break;
			
		case NON_HANDICAPPED:
			for(int spot = 0; spot < parkingLevels[level].rowsInLevel.get(row).size();spot++){
				if(parkingLevels[level].rowsInLevel.get(row).get(spot) instanceof GeneralParkingSpot && ((GeneralParkingSpot) parkingLevels[level].rowsInLevel.get(row).get(spot)).isHandicapped() == false && parkingLevels[level].rowsInLevel.get(row).get(spot).isOccupied()==false){
					rowStatus = Boolean.TRUE;
				}
			}
			parkingLevels[level].getRowAvailability().get(row).set(1,rowStatus);
			break;
			
		case BIKE:
			for(int spot = 0; spot < parkingLevels[level].rowsInLevel.get(row).size();spot++){
				if(parkingLevels[level].rowsInLevel.get(row).get(spot) instanceof BikeParkingSpot && parkingLevels[level].rowsInLevel.get(row).get(spot).isOccupied()==false){
					rowStatus = Boolean.TRUE;
				}
			}
			parkingLevels[level].getRowAvailability().get(row).set(1,rowStatus);
			break;
			
		default:
			break;
		}
		checkLevel(parkingType, level);
	}
	public void checkLevel(ParkingType parkingType, int level){
		Boolean levelStatus = Boolean.FALSE;
		int parkingTypeIdentifier = 0;
		switch(parkingType){
		case HANDICAPPED:
			parkingTypeIdentifier = 0;
			break;
		case NON_HANDICAPPED:
			parkingTypeIdentifier = 1;
			break;
		case BIKE:
			parkingTypeIdentifier = 2;
			break;
		default:
			break;
		}
		for(int row = 0; row < parkingLevels[level].getRowAvailability().size(); row++){
			if(parkingLevels[level].getRowAvailability().get(row).get(0)){
				levelStatus = Boolean.TRUE;
			}
		}
		parkingLevels[level].getLevelAvailability().set(parkingTypeIdentifier, levelStatus);
	}
	public void findFirstEmptySpot(Vehicle vehicle, ParkingType parkingType){
		for(int level=0;level<parkingLevels.length;level++){
			if(parkingType == ParkingType.HANDICAPPED || parkingType == ParkingType.NON_HANDICAPPED || parkingType==ParkingType.BIKE){
				// SKIP THE HEAVY VEHICLE BAYS
				if(!(parkingLevels[level] instanceof HeavyVehicleBay)){
					switch(parkingType){
					case HANDICAPPED:
						findFirstEmptySpotInsideLevel(vehicle, parkingType, level, 0);
						break;
					case NON_HANDICAPPED:
						findFirstEmptySpotInsideLevel(vehicle, parkingType, level, 1);
						break;
					case BIKE:
						findFirstEmptySpotInsideLevel(vehicle, parkingType, level, 2);
						break;
					default:
						break;
					}
				}
			}		
		}
	}

	public void findFirstEmptySpotInsideLevel(Vehicle vehicle, ParkingType parkingType, int level, int parkingTypeIdentifier) {
		if(parkingLevels[level].getLevelAvailability().get(parkingTypeIdentifier)){
			for(int row = 0; row < parkingLevels[level].getRowAvailability().size(); row++){
				if(parkingLevels[level].getRowAvailability().get(row).get(parkingTypeIdentifier)){
					for(int spot = 0; spot < parkingLevels[level].rowsInLevel.get(row).size();spot++){
						if(parkingLevels[level].rowsInLevel.get(row).get(spot).isOccupied()==false){
							parkingLevels[level].rowsInLevel.get(row).get(spot).park();
							getLicensePlateMap().put(vehicle.getLicensePlate(), parkingLevels[level].rowsInLevel.get(row).get(spot).getSlotNumber());
							checkRow(parkingType, level, row);
						}
					}
				}	
			}
		}
	}
	
	public void parkVehicle(Vehicle vehicle){
		if(vehicle.getVehicleType() == VehicleType.CAR || vehicle.getVehicleType() == VehicleType.BIKE){
			parkInParkingBay(vehicle);
		}
		else{
			parkInHeavyVehicleBay(vehicle);
		}
	}

	private void parkInHeavyVehicleBay(Vehicle vehicle) {
		// TODO Auto-generated method stub
		
	}

	private void parkInParkingBay(Vehicle vehicle) {
		// TODO Auto-generated method stub
		if(vehicle instanceof Car){
			if(((Car) vehicle).getIsHandicapped()==true)
				findFirstEmptySpot(vehicle, ParkingType.HANDICAPPED);
			else
				findFirstEmptySpot(vehicle, ParkingType.NON_HANDICAPPED);
		}
		else if(vehicle instanceof Bike){
			findFirstEmptySpot(vehicle, ParkingType.BIKE);
		}
	}

	public void unparkVehicle(String licensePlate){
		long parkedSlotNumber = getLicensePlateMap().get(licensePlate);
		int parkedLevel = (int) (parkedSlotNumber/InitSettings.TOTAL_PARKING_SPOTS_FOR_LEVEL);
		int parkedLocationInLevel = (int) (parkedSlotNumber%InitSettings.TOTAL_PARKING_SPOTS_FOR_LEVEL);
		//check Level Type
		if(parkingLevels[parkedLevel] instanceof HeavyVehicleBay){
			unparkFromHeavyVehicleBay(licensePlate, parkedLevel, parkedLocationInLevel);
		}
		else{
			unparkFromParkingBay(licensePlate, parkedLevel, parkedLocationInLevel);
		}
		
	}


	private void unparkFromParkingBay(String licensePlate, int parkedLevel, int parkedLocationInLevel) {
		// TODO Auto-generated method stub
		int lastIterated = 0;
		int parkedLocationIterator=parkedLocationInLevel;
		for(int i = 0; i<InitSettings.PARKING_SPOT_TYPES_FOR_PARKING_BAY.length; i++){
			if(parkedLocationIterator-(InitSettings.PARKING_SPOT_TYPES_FOR_PARKING_BAY[i]*InitSettings.PARKING_SPOT_SIZES_FOR_PARKING_BAY[i])>0){
				lastIterated = i;
				parkedLocationIterator -= InitSettings.PARKING_SPOT_TYPES_FOR_PARKING_BAY[i];
			}
			else
				break;
		}
		int parkingSlotsPerRow = InitSettings.TOTAL_PARKING_SPOTS_FOR_LEVEL/InitSettings.ROWS_FOR_LEVEL;
		int parkedRow = (int) (parkedLocationInLevel/parkingSlotsPerRow);
		int currentlyIteratedTill = parkedRow*parkingSlotsPerRow;
		int parkedPositionInRow = (parkedLocationInLevel-parkedLocationIterator-currentlyIteratedTill)/InitSettings.PARKING_SPOT_SIZES_FOR_PARKING_BAY[lastIterated];
		for(int i = parkedLocationInLevel-parkedLocationIterator; i<parkedLocationInLevel%parkingSlotsPerRow; i+=InitSettings.PARKING_SPOT_SIZES_FOR_PARKING_BAY[lastIterated+1]){
			parkedPositionInRow += 1;
		}
		parkingLevels[parkedLevel].rowsInLevel.get(parkedRow).get(parkedPositionInRow).unPark();
		getLicensePlateMap().remove(licensePlate);

	}

	private void unparkFromHeavyVehicleBay(String licensePlate, int parkedLevel, int parkedLocationInLevel) {
		// TODO Auto-generated method stub
		
	}

	public HashMap<String, Long> getLicensePlateMap() {
		return licensePlateMap;
	}

	public void setLicensePlateMap(HashMap<String, Long> licensePlateMap) {
		this.licensePlateMap = licensePlateMap;
	}
	
}

